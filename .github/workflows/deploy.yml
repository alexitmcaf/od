name: CI/CD for Odoo with Custom PostgreSQL

on:
  push:
    branches:
      - main

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 2: Verify addons directory exists
      - name: Verify addons directory
        run: test -d ./addons || { echo "addons directory not found"; exit 1; }

      # Step 3: Verify odoo.conf file exists
      - name: Verify odoo.conf file
        run: test -f ./etc/odoo.conf || { echo "odoo.conf file not found"; exit 1; }

      # Step 4: Copy addons and odoo.conf to docker folder
      - name: Copy addons and odoo.conf to docker folder
        run: |
          mkdir -p docker/addons
          mkdir -p docker/etc
          cp -r ./addons/* ./docker/addons/
          cp ./etc/odoo.conf ./docker/etc/odoo.conf

      # Step 5: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # Step 6: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build and Push Odoo Docker image
      - name: Build and Push Odoo Docker image
        uses: docker/build-push-action@v2
        with:
          context: docker
          file: docker/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/od:latest,${{ secrets.DOCKER_USERNAME }}/od:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/od:cache
          cache-to: type=inline

      # Step 8: Test Odoo and PostgreSQL Integration
      - name: Test Odoo and PostgreSQL Integration
        run: |
          cat <<EOF > docker-compose.test.yml
          version: '3.8'
          services:
            odoo:
              image: ${{ secrets.DOCKER_USERNAME }}/od:latest
              ports:
                - '8069:8069'
              environment:
                DB_HOST: db
                DB_USER: odoo
                DB_PASSWORD: odoo
                DB_NAME: odoo16
              depends_on:
                - db
            db:
              image: postgres:13
              environment:
                POSTGRES_USER: odoo
                POSTGRES_PASSWORD: odoo
                POSTGRES_DB: odoo16
          EOF

          docker-compose -f docker-compose.test.yml up -d
          sleep 20
          curl -f http://localhost:8069 || { echo 'Odoo failed to connect to PostgreSQL'; exit 1; }
          docker-compose -f docker-compose.test.yml down